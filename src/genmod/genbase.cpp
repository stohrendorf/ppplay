/***************************************************************************
 *   Copyright (C) 2009 by Syron                                           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include "genbase.h"

/**
* @file
* @brief Module base declarations (Implementation)
* @ingroup GenMod
*/

namespace ppp {
	const char NoteNames[12][3] = {
		"C-", "C#", "D-", "D#",
		"E-", "F-", "F#", "G-",
		"G#", "A-", "A#", "B-"
	};

	const int16_t SinLookup[256] = {
		+ 0x00, + 0x02, + 0x03, + 0x05, + 0x06, + 0x08, + 0x09, + 0x0b, + 0x0c, + 0x0e, + 0x10, + 0x11, + 0x13, + 0x14, + 0x16, + 0x17,
		+ 0x18, + 0x1a, + 0x1b, + 0x1d, + 0x1e, + 0x20, + 0x21, + 0x22, + 0x24, + 0x25, + 0x26, + 0x27, + 0x29, + 0x2a, + 0x2b, + 0x2c,
		+ 0x2d, + 0x2e, + 0x2f, + 0x30, + 0x31, + 0x32, + 0x33, + 0x34, + 0x35, + 0x36, + 0x37, + 0x38, + 0x38, + 0x39, + 0x3a, + 0x3b,
		+ 0x3b, + 0x3c, + 0x3c, + 0x3d, + 0x3d, + 0x3e, + 0x3e, + 0x3e, + 0x3f, + 0x3f, + 0x3f, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x3f, + 0x3f, + 0x3f, + 0x3e, + 0x3e, + 0x3e, + 0x3d, + 0x3d, + 0x3c, + 0x3c,
		+ 0x3b, + 0x3b, + 0x3a, + 0x39, + 0x38, + 0x38, + 0x37, + 0x36, + 0x35, + 0x34, + 0x33, + 0x32, + 0x31, + 0x30, + 0x2f, + 0x2e,
		+ 0x2d, + 0x2c, + 0x2b, + 0x2a, + 0x29, + 0x27, + 0x26, + 0x25, + 0x24, + 0x22, + 0x21, + 0x20, + 0x1e, + 0x1d, + 0x1b, + 0x1a,
		+ 0x18, + 0x17, + 0x16, + 0x14, + 0x13, + 0x11, + 0x10, + 0x0e, + 0x0c, + 0x0b, + 0x09, + 0x08, + 0x06, + 0x05, + 0x03, + 0x02,
		+ 0x00, - 0x02, - 0x03, - 0x05, - 0x06, - 0x08, - 0x09, - 0x0b, - 0x0c, - 0x0e, - 0x10, - 0x11, - 0x13, - 0x14, - 0x16, - 0x17,
		- 0x18, - 0x1a, - 0x1b, - 0x1d, - 0x1e, - 0x20, - 0x21, - 0x22, - 0x24, - 0x25, - 0x26, - 0x27, - 0x29, - 0x2a, - 0x2b, - 0x2c,
		- 0x2d, - 0x2e, - 0x2f, - 0x30, - 0x31, - 0x32, - 0x33, - 0x34, - 0x35, - 0x36, - 0x37, - 0x38, - 0x38, - 0x39, - 0x3a, - 0x3b,
		- 0x3b, - 0x3c, - 0x3c, - 0x3d, - 0x3d, - 0x3e, - 0x3e, - 0x3e, - 0x3f, - 0x3f, - 0x3f, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x3f, - 0x3f, - 0x3f, - 0x3e, - 0x3e, - 0x3e, - 0x3d, - 0x3d, - 0x3c, - 0x3c,
		- 0x3b, - 0x3b, - 0x3a, - 0x39, - 0x38, - 0x38, - 0x37, - 0x36, - 0x35, - 0x34, - 0x33, - 0x32, - 0x31, - 0x30, - 0x2f, - 0x2e,
		- 0x2d, - 0x2c, - 0x2b, - 0x2a, - 0x29, - 0x27, - 0x26, - 0x25, - 0x24, - 0x22, - 0x21, - 0x20, - 0x1e, - 0x1d, - 0x1b, - 0x1a,
		- 0x18, - 0x17, - 0x16, - 0x14, - 0x13, - 0x11, - 0x10, - 0x0e, - 0x0c, - 0x0b, - 0x09, - 0x08, - 0x06, - 0x05, - 0x03, - 0x02
	};

	const int16_t RampLookup[256] = {
		+ 0x20, + 0x1f, + 0x1f, + 0x1e, + 0x1e, + 0x1d, + 0x1d, + 0x1c, + 0x1c, + 0x1b, + 0x1b, + 0x1a, + 0x1a, + 0x19, + 0x19, + 0x18,
		+ 0x18, + 0x17, + 0x17, + 0x16, + 0x16, + 0x15, + 0x15, + 0x14, + 0x14, + 0x13, + 0x13, + 0x12, + 0x12, + 0x11, + 0x11, + 0x10,
		+ 0x10, + 0x0f, + 0x0f, + 0x0e, + 0x0e, + 0x0d, + 0x0d, + 0x0c, + 0x0c, + 0x0b, + 0x0b, + 0x0a, + 0x0a, + 0x09, + 0x09, + 0x08,
		+ 0x08, + 0x07, + 0x07, + 0x06, + 0x06, + 0x05, + 0x05, + 0x04, + 0x04, + 0x03, + 0x03, + 0x02, + 0x02, + 0x01, + 0x01, + 0x00,
		+ 0x00, + 0x00, - 0x01, - 0x01, - 0x02, - 0x02, - 0x03, - 0x03, - 0x04, - 0x04, - 0x05, - 0x05, - 0x06, - 0x06, - 0x07, - 0x07,
		- 0x08, - 0x08, - 0x09, - 0x09, - 0x0a, - 0x0a, - 0x0b, - 0x0b, - 0x0c, - 0x0c, - 0x0d, - 0x0d, - 0x0e, - 0x0e, - 0x0f, - 0x0f,
		- 0x10, - 0x10, - 0x11, - 0x11, - 0x12, - 0x12, - 0x13, - 0x13, - 0x14, - 0x14, - 0x15, - 0x15, - 0x16, - 0x16, - 0x17, - 0x17,
		- 0x18, - 0x18, - 0x19, - 0x19, - 0x1a, - 0x1a, - 0x1b, - 0x1b, - 0x1c, - 0x1c, - 0x1d, - 0x1d, - 0x1e, - 0x1e, - 0x1f, - 0x1f,
		+ 0x20, + 0x1f, + 0x1f, + 0x1e, + 0x1e, + 0x1d, + 0x1d, + 0x1c, + 0x1c, + 0x1b, + 0x1b, + 0x1a, + 0x1a, + 0x19, + 0x19, + 0x18,
		+ 0x18, + 0x17, + 0x17, + 0x16, + 0x16, + 0x15, + 0x15, + 0x14, + 0x14, + 0x13, + 0x13, + 0x12, + 0x12, + 0x11, + 0x11, + 0x10,
		+ 0x10, + 0x0f, + 0x0f, + 0x0e, + 0x0e, + 0x0d, + 0x0d, + 0x0c, + 0x0c, + 0x0b, + 0x0b, + 0x0a, + 0x0a, + 0x09, + 0x09, + 0x08,
		+ 0x08, + 0x07, + 0x07, + 0x06, + 0x06, + 0x05, + 0x05, + 0x04, + 0x04, + 0x03, + 0x03, + 0x02, + 0x02, + 0x01, + 0x01, + 0x00,
		+ 0x00, + 0x00, - 0x01, - 0x01, - 0x02, - 0x02, - 0x03, - 0x03, - 0x04, - 0x04, - 0x05, - 0x05, - 0x06, - 0x06, - 0x07, - 0x07,
		- 0x08, - 0x08, - 0x09, - 0x09, - 0x0a, - 0x0a, - 0x0b, - 0x0b, - 0x0c, - 0x0c, - 0x0d, - 0x0d, - 0x0e, - 0x0e, - 0x0f, - 0x0f,
		- 0x10, - 0x10, - 0x11, - 0x11, - 0x12, - 0x12, - 0x13, - 0x13, - 0x14, - 0x14, - 0x15, - 0x15, - 0x16, - 0x16, - 0x17, - 0x17,
		- 0x18, - 0x18, - 0x19, - 0x19, - 0x1a, - 0x1a, - 0x1b, - 0x1b, - 0x1c, - 0x1c, - 0x1d, - 0x1d, - 0x1e, - 0x1e, - 0x1f, - 0x1f
	};

	const int16_t SquareLookup[256] = {
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		+ 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40, + 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40,
		- 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40, - 0x40
	};

	const int16_t ProtrackerLookup[256] = {
		      0,   0,   0,   0,  24,  24,  24,  24,  49,  49,  49,  49,  74,  74,  74,  74,  97,  97,  97,  97, 120, 120, 120, 120, 141, 141, 141, 141, 161, 161, 161, 161,
		    180, 180, 180, 180, 197, 197, 197, 197, 212, 212, 212, 212, 224, 224, 224, 224, 235, 235, 235, 235, 244, 244, 244, 244, 250, 250, 250, 250, 253, 253, 253, 253,
		    255, 255, 255, 255, 253, 253, 253, 253, 250, 250, 250, 250, 244, 244, 244, 244, 235, 235, 235, 235, 224, 224, 224, 224, 212, 212, 212, 212, 197, 197, 197, 197,
		    180, 180, 180, 180, 161, 161, 161, 161, 141, 141, 141, 141, 120, 120, 120, 120,  97,  97,  97,  97,  74,  74,  74,  74,  49,  49,  49,  49,  24,  24,  24,  24,
		   -  0,-  0,-  0,-  0,- 24,- 24,- 24,- 24,- 49,- 49,- 49,- 49,- 74,- 74,- 74,- 74,- 97,- 97,- 97,- 97,-120,-120,-120,-120,-141,-141,-141,-141,-161,-161,-161,-161,
		   -180,-180,-180,-180,-197,-197,-197,-197,-212,-212,-212,-212,-224,-224,-224,-224,-235,-235,-235,-235,-244,-244,-244,-244,-250,-250,-250,-250,-253,-253,-253,-253,
		   -255,-255,-255,-255,-253,-253,-253,-253,-250,-250,-250,-250,-244,-244,-244,-244,-235,-235,-235,-235,-224,-224,-224,-224,-212,-212,-212,-212,-197,-197,-197,-197,
		   -180,-180,-180,-180,-161,-161,-161,-161,-141,-141,-141,-141,-120,-120,-120,-120,- 97,- 97,- 97,- 97,- 74,- 74,- 74,- 74,- 49,- 49,- 49,- 49,- 24,- 24,- 24,- 24,
	};

	GenOrder::GenOrder(uint8_t idx) throw() : m_index{idx}, m_count{0}, m_states{} {
		m_states.push_back(BinStream::SpBinStream(new SBinStream()));
	}
	BinStream::SpBinStream GenOrder::getState(uint16_t idx) throw(PppException) {
		PPP_TEST(idx>=m_states.size());
		return m_states[idx];
	}
	BinStream::SpBinStream GenOrder::getCurrentState() throw(PppException) {
		return getState(m_count);
	}
	uint8_t GenOrder::getIndex() const throw() {
		return m_index;
	}
	void GenOrder::setIndex(const uint8_t n) throw() {
		m_index = n;
	}
	uint8_t GenOrder::getCount() const throw() {
		return m_count;
	}
	void GenOrder::setCount(const uint8_t n) throw() {
		m_count = n;
	}
	uint8_t GenOrder::incCount() throw(PppException) {
		PPP_TEST(m_count==0xff);
		m_count++;
		while(m_count>=m_states.size())
			m_states.push_back( BinStream::SpBinStream(new SBinStream()) );
		return m_count;
	}
	void GenOrder::resetCount() throw() {
		m_count = 0;
	}
}
